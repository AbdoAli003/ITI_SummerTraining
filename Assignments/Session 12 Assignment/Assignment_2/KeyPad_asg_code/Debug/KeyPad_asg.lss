
KeyPad_asg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  00000dba  00000e2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000015f0  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e16  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 3b       	cpi	r26, 0xBE	; 190
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 c2 06 	call	0xd84	; 0xd84 <main>
  7a:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit        (void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);
  8a:	ea e3       	ldi	r30, 0x3A	; 58
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	80 83       	st	Z, r24
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);
  92:	e4 e3       	ldi	r30, 0x34	; 52
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	80 83       	st	Z, r24
}
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	08 95       	ret

000000a0 <DIO_u8SetPinDirection>:

u8  DIO_u8SetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	2e 97       	sbiw	r28, 0x0e	; 14
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	8a 83       	std	Y+2, r24	; 0x02
  b6:	6b 83       	std	Y+3, r22	; 0x03
  b8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	84 30       	cpi	r24, 0x04	; 4
  c2:	08 f0       	brcs	.+2      	; 0xc6 <DIO_u8SetPinDirection+0x26>
  c4:	0c c1       	rjmp	.+536    	; 0x2de <DIO_u8SetPinDirection+0x23e>
  c6:	8b 81       	ldd	r24, Y+3	; 0x03
  c8:	88 30       	cpi	r24, 0x08	; 8
  ca:	08 f0       	brcs	.+2      	; 0xce <DIO_u8SetPinDirection+0x2e>
  cc:	08 c1       	rjmp	.+528    	; 0x2de <DIO_u8SetPinDirection+0x23e>
  ce:	8c 81       	ldd	r24, Y+4	; 0x04
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	21 f0       	breq	.+8      	; 0xdc <DIO_u8SetPinDirection+0x3c>
  d4:	8c 81       	ldd	r24, Y+4	; 0x04
  d6:	88 23       	and	r24, r24
  d8:	09 f0       	breq	.+2      	; 0xdc <DIO_u8SetPinDirection+0x3c>
  da:	01 c1       	rjmp	.+514    	; 0x2de <DIO_u8SetPinDirection+0x23e>
	{
		switch (Copy_u8PortId)
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	28 2f       	mov	r18, r24
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	3e 87       	std	Y+14, r19	; 0x0e
  e4:	2d 87       	std	Y+13, r18	; 0x0d
  e6:	8d 85       	ldd	r24, Y+13	; 0x0d
  e8:	9e 85       	ldd	r25, Y+14	; 0x0e
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	91 05       	cpc	r25, r1
  ee:	09 f4       	brne	.+2      	; 0xf2 <DIO_u8SetPinDirection+0x52>
  f0:	4f c0       	rjmp	.+158    	; 0x190 <DIO_u8SetPinDirection+0xf0>
  f2:	2d 85       	ldd	r18, Y+13	; 0x0d
  f4:	3e 85       	ldd	r19, Y+14	; 0x0e
  f6:	22 30       	cpi	r18, 0x02	; 2
  f8:	31 05       	cpc	r19, r1
  fa:	2c f4       	brge	.+10     	; 0x106 <DIO_u8SetPinDirection+0x66>
  fc:	8d 85       	ldd	r24, Y+13	; 0x0d
  fe:	9e 85       	ldd	r25, Y+14	; 0x0e
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	71 f0       	breq	.+28     	; 0x120 <DIO_u8SetPinDirection+0x80>
 104:	ed c0       	rjmp	.+474    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
 106:	2d 85       	ldd	r18, Y+13	; 0x0d
 108:	3e 85       	ldd	r19, Y+14	; 0x0e
 10a:	22 30       	cpi	r18, 0x02	; 2
 10c:	31 05       	cpc	r19, r1
 10e:	09 f4       	brne	.+2      	; 0x112 <DIO_u8SetPinDirection+0x72>
 110:	77 c0       	rjmp	.+238    	; 0x200 <DIO_u8SetPinDirection+0x160>
 112:	8d 85       	ldd	r24, Y+13	; 0x0d
 114:	9e 85       	ldd	r25, Y+14	; 0x0e
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	91 05       	cpc	r25, r1
 11a:	09 f4       	brne	.+2      	; 0x11e <DIO_u8SetPinDirection+0x7e>
 11c:	a9 c0       	rjmp	.+338    	; 0x270 <DIO_u8SetPinDirection+0x1d0>
 11e:	e0 c0       	rjmp	.+448    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinDirection)
 120:	8c 81       	ldd	r24, Y+4	; 0x04
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	3c 87       	std	Y+12, r19	; 0x0c
 128:	2b 87       	std	Y+11, r18	; 0x0b
 12a:	8b 85       	ldd	r24, Y+11	; 0x0b
 12c:	9c 85       	ldd	r25, Y+12	; 0x0c
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	d1 f0       	breq	.+52     	; 0x166 <DIO_u8SetPinDirection+0xc6>
 132:	2b 85       	ldd	r18, Y+11	; 0x0b
 134:	3c 85       	ldd	r19, Y+12	; 0x0c
 136:	21 30       	cpi	r18, 0x01	; 1
 138:	31 05       	cpc	r19, r1
 13a:	09 f0       	breq	.+2      	; 0x13e <DIO_u8SetPinDirection+0x9e>
 13c:	d1 c0       	rjmp	.+418    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
 13e:	aa e3       	ldi	r26, 0x3A	; 58
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	ea e3       	ldi	r30, 0x3A	; 58
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	48 2f       	mov	r20, r24
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 2e       	mov	r0, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_u8SetPinDirection+0xbc>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_u8SetPinDirection+0xb8>
 160:	84 2b       	or	r24, r20
 162:	8c 93       	st	X, r24
 164:	bd c0       	rjmp	.+378    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
 166:	aa e3       	ldi	r26, 0x3A	; 58
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	ea e3       	ldi	r30, 0x3A	; 58
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_u8SetPinDirection+0xe4>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_u8SetPinDirection+0xe0>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	a8 c0       	rjmp	.+336    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection)
 190:	8c 81       	ldd	r24, Y+4	; 0x04
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	3a 87       	std	Y+10, r19	; 0x0a
 198:	29 87       	std	Y+9, r18	; 0x09
 19a:	89 85       	ldd	r24, Y+9	; 0x09
 19c:	9a 85       	ldd	r25, Y+10	; 0x0a
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	d1 f0       	breq	.+52     	; 0x1d6 <DIO_u8SetPinDirection+0x136>
 1a2:	29 85       	ldd	r18, Y+9	; 0x09
 1a4:	3a 85       	ldd	r19, Y+10	; 0x0a
 1a6:	21 30       	cpi	r18, 0x01	; 1
 1a8:	31 05       	cpc	r19, r1
 1aa:	09 f0       	breq	.+2      	; 0x1ae <DIO_u8SetPinDirection+0x10e>
 1ac:	99 c0       	rjmp	.+306    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
 1ae:	a7 e3       	ldi	r26, 0x37	; 55
 1b0:	b0 e0       	ldi	r27, 0x00	; 0
 1b2:	e7 e3       	ldi	r30, 0x37	; 55
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	48 2f       	mov	r20, r24
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	28 2f       	mov	r18, r24
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 2e       	mov	r0, r18
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_u8SetPinDirection+0x12c>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_u8SetPinDirection+0x128>
 1d0:	84 2b       	or	r24, r20
 1d2:	8c 93       	st	X, r24
 1d4:	85 c0       	rjmp	.+266    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
 1d6:	a7 e3       	ldi	r26, 0x37	; 55
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e7 e3       	ldi	r30, 0x37	; 55
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_u8SetPinDirection+0x154>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_u8SetPinDirection+0x150>
 1f8:	80 95       	com	r24
 1fa:	84 23       	and	r24, r20
 1fc:	8c 93       	st	X, r24
 1fe:	70 c0       	rjmp	.+224    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinDirection)
 200:	8c 81       	ldd	r24, Y+4	; 0x04
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	38 87       	std	Y+8, r19	; 0x08
 208:	2f 83       	std	Y+7, r18	; 0x07
 20a:	8f 81       	ldd	r24, Y+7	; 0x07
 20c:	98 85       	ldd	r25, Y+8	; 0x08
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	d1 f0       	breq	.+52     	; 0x246 <DIO_u8SetPinDirection+0x1a6>
 212:	2f 81       	ldd	r18, Y+7	; 0x07
 214:	38 85       	ldd	r19, Y+8	; 0x08
 216:	21 30       	cpi	r18, 0x01	; 1
 218:	31 05       	cpc	r19, r1
 21a:	09 f0       	breq	.+2      	; 0x21e <DIO_u8SetPinDirection+0x17e>
 21c:	61 c0       	rjmp	.+194    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 21e:	a4 e3       	ldi	r26, 0x34	; 52
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	e4 e3       	ldi	r30, 0x34	; 52
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	48 2f       	mov	r20, r24
 22a:	8b 81       	ldd	r24, Y+3	; 0x03
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 2e       	mov	r0, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_u8SetPinDirection+0x19c>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_u8SetPinDirection+0x198>
 240:	84 2b       	or	r24, r20
 242:	8c 93       	st	X, r24
 244:	4d c0       	rjmp	.+154    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 246:	a4 e3       	ldi	r26, 0x34	; 52
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e4 e3       	ldi	r30, 0x34	; 52
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	48 2f       	mov	r20, r24
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 2e       	mov	r0, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_u8SetPinDirection+0x1c4>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_u8SetPinDirection+0x1c0>
 268:	80 95       	com	r24
 26a:	84 23       	and	r24, r20
 26c:	8c 93       	st	X, r24
 26e:	38 c0       	rjmp	.+112    	; 0x2e0 <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinDirection)
 270:	8c 81       	ldd	r24, Y+4	; 0x04
 272:	28 2f       	mov	r18, r24
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	3e 83       	std	Y+6, r19	; 0x06
 278:	2d 83       	std	Y+5, r18	; 0x05
 27a:	8d 81       	ldd	r24, Y+5	; 0x05
 27c:	9e 81       	ldd	r25, Y+6	; 0x06
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	c9 f0       	breq	.+50     	; 0x2b4 <DIO_u8SetPinDirection+0x214>
 282:	2d 81       	ldd	r18, Y+5	; 0x05
 284:	3e 81       	ldd	r19, Y+6	; 0x06
 286:	21 30       	cpi	r18, 0x01	; 1
 288:	31 05       	cpc	r19, r1
 28a:	51 f5       	brne	.+84     	; 0x2e0 <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 28c:	a1 e3       	ldi	r26, 0x31	; 49
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	e1 e3       	ldi	r30, 0x31	; 49
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	48 2f       	mov	r20, r24
 298:	8b 81       	ldd	r24, Y+3	; 0x03
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 2e       	mov	r0, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_u8SetPinDirection+0x20a>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_u8SetPinDirection+0x206>
 2ae:	84 2b       	or	r24, r20
 2b0:	8c 93       	st	X, r24
 2b2:	16 c0       	rjmp	.+44     	; 0x2e0 <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 2b4:	a1 e3       	ldi	r26, 0x31	; 49
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	e1 e3       	ldi	r30, 0x31	; 49
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	48 2f       	mov	r20, r24
 2c0:	8b 81       	ldd	r24, Y+3	; 0x03
 2c2:	28 2f       	mov	r18, r24
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 2e       	mov	r0, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_u8SetPinDirection+0x232>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_u8SetPinDirection+0x22e>
 2d6:	80 95       	com	r24
 2d8:	84 23       	and	r24, r20
 2da:	8c 93       	st	X, r24
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <DIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 2de:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
}
 2e2:	2e 96       	adiw	r28, 0x0e	; 14
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	cf 91       	pop	r28
 2f0:	df 91       	pop	r29
 2f2:	08 95       	ret

000002f4 <DIO_u8SetPinValue>:

u8  DIO_u8SetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
 2f4:	df 93       	push	r29
 2f6:	cf 93       	push	r28
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	2e 97       	sbiw	r28, 0x0e	; 14
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
 308:	8a 83       	std	Y+2, r24	; 0x02
 30a:	6b 83       	std	Y+3, r22	; 0x03
 30c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	88 30       	cpi	r24, 0x08	; 8
 316:	08 f0       	brcs	.+2      	; 0x31a <DIO_u8SetPinValue+0x26>
 318:	08 c1       	rjmp	.+528    	; 0x52a <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	3e 87       	std	Y+14, r19	; 0x0e
 322:	2d 87       	std	Y+13, r18	; 0x0d
 324:	8d 85       	ldd	r24, Y+13	; 0x0d
 326:	9e 85       	ldd	r25, Y+14	; 0x0e
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	91 05       	cpc	r25, r1
 32c:	09 f4       	brne	.+2      	; 0x330 <DIO_u8SetPinValue+0x3c>
 32e:	50 c0       	rjmp	.+160    	; 0x3d0 <DIO_u8SetPinValue+0xdc>
 330:	2d 85       	ldd	r18, Y+13	; 0x0d
 332:	3e 85       	ldd	r19, Y+14	; 0x0e
 334:	22 30       	cpi	r18, 0x02	; 2
 336:	31 05       	cpc	r19, r1
 338:	2c f4       	brge	.+10     	; 0x344 <DIO_u8SetPinValue+0x50>
 33a:	8d 85       	ldd	r24, Y+13	; 0x0d
 33c:	9e 85       	ldd	r25, Y+14	; 0x0e
 33e:	00 97       	sbiw	r24, 0x00	; 0
 340:	71 f0       	breq	.+28     	; 0x35e <DIO_u8SetPinValue+0x6a>
 342:	f1 c0       	rjmp	.+482    	; 0x526 <DIO_u8SetPinValue+0x232>
 344:	2d 85       	ldd	r18, Y+13	; 0x0d
 346:	3e 85       	ldd	r19, Y+14	; 0x0e
 348:	22 30       	cpi	r18, 0x02	; 2
 34a:	31 05       	cpc	r19, r1
 34c:	09 f4       	brne	.+2      	; 0x350 <DIO_u8SetPinValue+0x5c>
 34e:	79 c0       	rjmp	.+242    	; 0x442 <DIO_u8SetPinValue+0x14e>
 350:	8d 85       	ldd	r24, Y+13	; 0x0d
 352:	9e 85       	ldd	r25, Y+14	; 0x0e
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	91 05       	cpc	r25, r1
 358:	09 f4       	brne	.+2      	; 0x35c <DIO_u8SetPinValue+0x68>
 35a:	ac c0       	rjmp	.+344    	; 0x4b4 <DIO_u8SetPinValue+0x1c0>
 35c:	e4 c0       	rjmp	.+456    	; 0x526 <DIO_u8SetPinValue+0x232>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinValue)
 35e:	8c 81       	ldd	r24, Y+4	; 0x04
 360:	28 2f       	mov	r18, r24
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	3c 87       	std	Y+12, r19	; 0x0c
 366:	2b 87       	std	Y+11, r18	; 0x0b
 368:	8b 85       	ldd	r24, Y+11	; 0x0b
 36a:	9c 85       	ldd	r25, Y+12	; 0x0c
 36c:	00 97       	sbiw	r24, 0x00	; 0
 36e:	c9 f0       	breq	.+50     	; 0x3a2 <DIO_u8SetPinValue+0xae>
 370:	2b 85       	ldd	r18, Y+11	; 0x0b
 372:	3c 85       	ldd	r19, Y+12	; 0x0c
 374:	21 30       	cpi	r18, 0x01	; 1
 376:	31 05       	cpc	r19, r1
 378:	49 f5       	brne	.+82     	; 0x3cc <DIO_u8SetPinValue+0xd8>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 37a:	ab e3       	ldi	r26, 0x3B	; 59
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	eb e3       	ldi	r30, 0x3B	; 59
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	48 2f       	mov	r20, r24
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	28 2f       	mov	r18, r24
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 2e       	mov	r0, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_u8SetPinValue+0xa4>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_u8SetPinValue+0xa0>
 39c:	84 2b       	or	r24, r20
 39e:	8c 93       	st	X, r24
 3a0:	c5 c0       	rjmp	.+394    	; 0x52c <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 3a2:	ab e3       	ldi	r26, 0x3B	; 59
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	eb e3       	ldi	r30, 0x3B	; 59
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	48 2f       	mov	r20, r24
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 2e       	mov	r0, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_u8SetPinValue+0xcc>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_u8SetPinValue+0xc8>
 3c4:	80 95       	com	r24
 3c6:	84 23       	and	r24, r20
 3c8:	8c 93       	st	X, r24
 3ca:	b0 c0       	rjmp	.+352    	; 0x52c <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
 3cc:	19 82       	std	Y+1, r1	; 0x01
 3ce:	ae c0       	rjmp	.+348    	; 0x52c <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue)
 3d0:	8c 81       	ldd	r24, Y+4	; 0x04
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	3a 87       	std	Y+10, r19	; 0x0a
 3d8:	29 87       	std	Y+9, r18	; 0x09
 3da:	89 85       	ldd	r24, Y+9	; 0x09
 3dc:	9a 85       	ldd	r25, Y+10	; 0x0a
 3de:	00 97       	sbiw	r24, 0x00	; 0
 3e0:	c9 f0       	breq	.+50     	; 0x414 <DIO_u8SetPinValue+0x120>
 3e2:	29 85       	ldd	r18, Y+9	; 0x09
 3e4:	3a 85       	ldd	r19, Y+10	; 0x0a
 3e6:	21 30       	cpi	r18, 0x01	; 1
 3e8:	31 05       	cpc	r19, r1
 3ea:	49 f5       	brne	.+82     	; 0x43e <DIO_u8SetPinValue+0x14a>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 3ec:	a8 e3       	ldi	r26, 0x38	; 56
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	e8 e3       	ldi	r30, 0x38	; 56
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	48 2f       	mov	r20, r24
 3f8:	8b 81       	ldd	r24, Y+3	; 0x03
 3fa:	28 2f       	mov	r18, r24
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 2e       	mov	r0, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_u8SetPinValue+0x116>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_u8SetPinValue+0x112>
 40e:	84 2b       	or	r24, r20
 410:	8c 93       	st	X, r24
 412:	8c c0       	rjmp	.+280    	; 0x52c <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 414:	a8 e3       	ldi	r26, 0x38	; 56
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	e8 e3       	ldi	r30, 0x38	; 56
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	48 2f       	mov	r20, r24
 420:	8b 81       	ldd	r24, Y+3	; 0x03
 422:	28 2f       	mov	r18, r24
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 2e       	mov	r0, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_u8SetPinValue+0x13e>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_u8SetPinValue+0x13a>
 436:	80 95       	com	r24
 438:	84 23       	and	r24, r20
 43a:	8c 93       	st	X, r24
 43c:	77 c0       	rjmp	.+238    	; 0x52c <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
 43e:	19 82       	std	Y+1, r1	; 0x01
 440:	75 c0       	rjmp	.+234    	; 0x52c <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinValue)
 442:	8c 81       	ldd	r24, Y+4	; 0x04
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	38 87       	std	Y+8, r19	; 0x08
 44a:	2f 83       	std	Y+7, r18	; 0x07
 44c:	8f 81       	ldd	r24, Y+7	; 0x07
 44e:	98 85       	ldd	r25, Y+8	; 0x08
 450:	00 97       	sbiw	r24, 0x00	; 0
 452:	c9 f0       	breq	.+50     	; 0x486 <DIO_u8SetPinValue+0x192>
 454:	2f 81       	ldd	r18, Y+7	; 0x07
 456:	38 85       	ldd	r19, Y+8	; 0x08
 458:	21 30       	cpi	r18, 0x01	; 1
 45a:	31 05       	cpc	r19, r1
 45c:	49 f5       	brne	.+82     	; 0x4b0 <DIO_u8SetPinValue+0x1bc>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 45e:	a5 e3       	ldi	r26, 0x35	; 53
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e5 e3       	ldi	r30, 0x35	; 53
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	48 2f       	mov	r20, r24
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	28 2f       	mov	r18, r24
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 2e       	mov	r0, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_u8SetPinValue+0x188>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	0a 94       	dec	r0
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_u8SetPinValue+0x184>
 480:	84 2b       	or	r24, r20
 482:	8c 93       	st	X, r24
 484:	53 c0       	rjmp	.+166    	; 0x52c <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 486:	a5 e3       	ldi	r26, 0x35	; 53
 488:	b0 e0       	ldi	r27, 0x00	; 0
 48a:	e5 e3       	ldi	r30, 0x35	; 53
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	48 2f       	mov	r20, r24
 492:	8b 81       	ldd	r24, Y+3	; 0x03
 494:	28 2f       	mov	r18, r24
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 2e       	mov	r0, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_u8SetPinValue+0x1b0>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	0a 94       	dec	r0
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_u8SetPinValue+0x1ac>
 4a8:	80 95       	com	r24
 4aa:	84 23       	and	r24, r20
 4ac:	8c 93       	st	X, r24
 4ae:	3e c0       	rjmp	.+124    	; 0x52c <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
 4b0:	19 82       	std	Y+1, r1	; 0x01
 4b2:	3c c0       	rjmp	.+120    	; 0x52c <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinValue)
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	3e 83       	std	Y+6, r19	; 0x06
 4bc:	2d 83       	std	Y+5, r18	; 0x05
 4be:	8d 81       	ldd	r24, Y+5	; 0x05
 4c0:	9e 81       	ldd	r25, Y+6	; 0x06
 4c2:	00 97       	sbiw	r24, 0x00	; 0
 4c4:	c9 f0       	breq	.+50     	; 0x4f8 <DIO_u8SetPinValue+0x204>
 4c6:	2d 81       	ldd	r18, Y+5	; 0x05
 4c8:	3e 81       	ldd	r19, Y+6	; 0x06
 4ca:	21 30       	cpi	r18, 0x01	; 1
 4cc:	31 05       	cpc	r19, r1
 4ce:	49 f5       	brne	.+82     	; 0x522 <DIO_u8SetPinValue+0x22e>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 4d0:	a2 e3       	ldi	r26, 0x32	; 50
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	e2 e3       	ldi	r30, 0x32	; 50
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	48 2f       	mov	r20, r24
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	28 2f       	mov	r18, r24
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 2e       	mov	r0, r18
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_u8SetPinValue+0x1fa>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_u8SetPinValue+0x1f6>
 4f2:	84 2b       	or	r24, r20
 4f4:	8c 93       	st	X, r24
 4f6:	1a c0       	rjmp	.+52     	; 0x52c <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 4f8:	a2 e3       	ldi	r26, 0x32	; 50
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	e2 e3       	ldi	r30, 0x32	; 50
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	48 2f       	mov	r20, r24
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 2e       	mov	r0, r18
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_u8SetPinValue+0x222>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	0a 94       	dec	r0
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_u8SetPinValue+0x21e>
 51a:	80 95       	com	r24
 51c:	84 23       	and	r24, r20
 51e:	8c 93       	st	X, r24
 520:	05 c0       	rjmp	.+10     	; 0x52c <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
 522:	19 82       	std	Y+1, r1	; 0x01
 524:	03 c0       	rjmp	.+6      	; 0x52c <DIO_u8SetPinValue+0x238>
				}
			break;
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
 526:	19 82       	std	Y+1, r1	; 0x01
 528:	01 c0       	rjmp	.+2      	; 0x52c <DIO_u8SetPinValue+0x238>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 52a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 52c:	89 81       	ldd	r24, Y+1	; 0x01
}
 52e:	2e 96       	adiw	r28, 0x0e	; 14
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	cf 91       	pop	r28
 53c:	df 91       	pop	r29
 53e:	08 95       	ret

00000540 <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 * Copy_pu8ReturnedPinValue)
{
 540:	df 93       	push	r29
 542:	cf 93       	push	r28
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
 548:	28 97       	sbiw	r28, 0x08	; 8
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	8b 83       	std	Y+3, r24	; 0x03
 556:	6c 83       	std	Y+4, r22	; 0x04
 558:	5e 83       	std	Y+6, r21	; 0x06
 55a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	switch (Copy_u8PortId)
 560:	8b 81       	ldd	r24, Y+3	; 0x03
 562:	28 2f       	mov	r18, r24
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	38 87       	std	Y+8, r19	; 0x08
 568:	2f 83       	std	Y+7, r18	; 0x07
 56a:	4f 81       	ldd	r20, Y+7	; 0x07
 56c:	58 85       	ldd	r21, Y+8	; 0x08
 56e:	41 30       	cpi	r20, 0x01	; 1
 570:	51 05       	cpc	r21, r1
 572:	59 f1       	breq	.+86     	; 0x5ca <DIO_u8GetPinValue+0x8a>
 574:	8f 81       	ldd	r24, Y+7	; 0x07
 576:	98 85       	ldd	r25, Y+8	; 0x08
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	91 05       	cpc	r25, r1
 57c:	34 f4       	brge	.+12     	; 0x58a <DIO_u8GetPinValue+0x4a>
 57e:	2f 81       	ldd	r18, Y+7	; 0x07
 580:	38 85       	ldd	r19, Y+8	; 0x08
 582:	21 15       	cp	r18, r1
 584:	31 05       	cpc	r19, r1
 586:	69 f0       	breq	.+26     	; 0x5a2 <DIO_u8GetPinValue+0x62>
 588:	5c c0       	rjmp	.+184    	; 0x642 <DIO_u8GetPinValue+0x102>
 58a:	4f 81       	ldd	r20, Y+7	; 0x07
 58c:	58 85       	ldd	r21, Y+8	; 0x08
 58e:	42 30       	cpi	r20, 0x02	; 2
 590:	51 05       	cpc	r21, r1
 592:	79 f1       	breq	.+94     	; 0x5f2 <DIO_u8GetPinValue+0xb2>
 594:	8f 81       	ldd	r24, Y+7	; 0x07
 596:	98 85       	ldd	r25, Y+8	; 0x08
 598:	83 30       	cpi	r24, 0x03	; 3
 59a:	91 05       	cpc	r25, r1
 59c:	09 f4       	brne	.+2      	; 0x5a0 <DIO_u8GetPinValue+0x60>
 59e:	3d c0       	rjmp	.+122    	; 0x61a <DIO_u8GetPinValue+0xda>
 5a0:	50 c0       	rjmp	.+160    	; 0x642 <DIO_u8GetPinValue+0x102>
	{

	case DIO_u8_PORTA:
	*Copy_pu8ReturnedPinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
 5a2:	e9 e3       	ldi	r30, 0x39	; 57
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	28 2f       	mov	r18, r24
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	8c 81       	ldd	r24, Y+4	; 0x04
 5ae:	88 2f       	mov	r24, r24
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	a9 01       	movw	r20, r18
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_u8GetPinValue+0x7a>
 5b6:	55 95       	asr	r21
 5b8:	47 95       	ror	r20
 5ba:	8a 95       	dec	r24
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_u8GetPinValue+0x76>
 5be:	ca 01       	movw	r24, r20
 5c0:	81 70       	andi	r24, 0x01	; 1
 5c2:	ed 81       	ldd	r30, Y+5	; 0x05
 5c4:	fe 81       	ldd	r31, Y+6	; 0x06
 5c6:	80 83       	st	Z, r24
 5c8:	3d c0       	rjmp	.+122    	; 0x644 <DIO_u8GetPinValue+0x104>
	break;

	case DIO_u8_PORTB:
	*Copy_pu8ReturnedPinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
 5ca:	e6 e3       	ldi	r30, 0x36	; 54
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	8c 81       	ldd	r24, Y+4	; 0x04
 5d6:	88 2f       	mov	r24, r24
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	a9 01       	movw	r20, r18
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_u8GetPinValue+0xa2>
 5de:	55 95       	asr	r21
 5e0:	47 95       	ror	r20
 5e2:	8a 95       	dec	r24
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_u8GetPinValue+0x9e>
 5e6:	ca 01       	movw	r24, r20
 5e8:	81 70       	andi	r24, 0x01	; 1
 5ea:	ed 81       	ldd	r30, Y+5	; 0x05
 5ec:	fe 81       	ldd	r31, Y+6	; 0x06
 5ee:	80 83       	st	Z, r24
 5f0:	29 c0       	rjmp	.+82     	; 0x644 <DIO_u8GetPinValue+0x104>
	break;

	case DIO_u8_PORTC:
	*Copy_pu8ReturnedPinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
 5f2:	e3 e3       	ldi	r30, 0x33	; 51
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	8c 81       	ldd	r24, Y+4	; 0x04
 5fe:	88 2f       	mov	r24, r24
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	a9 01       	movw	r20, r18
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_u8GetPinValue+0xca>
 606:	55 95       	asr	r21
 608:	47 95       	ror	r20
 60a:	8a 95       	dec	r24
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_u8GetPinValue+0xc6>
 60e:	ca 01       	movw	r24, r20
 610:	81 70       	andi	r24, 0x01	; 1
 612:	ed 81       	ldd	r30, Y+5	; 0x05
 614:	fe 81       	ldd	r31, Y+6	; 0x06
 616:	80 83       	st	Z, r24
 618:	15 c0       	rjmp	.+42     	; 0x644 <DIO_u8GetPinValue+0x104>
	break;

	case DIO_u8_PORTD:
	*Copy_pu8ReturnedPinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
 61a:	e0 e3       	ldi	r30, 0x30	; 48
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	8c 81       	ldd	r24, Y+4	; 0x04
 626:	88 2f       	mov	r24, r24
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	a9 01       	movw	r20, r18
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_u8GetPinValue+0xf2>
 62e:	55 95       	asr	r21
 630:	47 95       	ror	r20
 632:	8a 95       	dec	r24
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_u8GetPinValue+0xee>
 636:	ca 01       	movw	r24, r20
 638:	81 70       	andi	r24, 0x01	; 1
 63a:	ed 81       	ldd	r30, Y+5	; 0x05
 63c:	fe 81       	ldd	r31, Y+6	; 0x06
 63e:	80 83       	st	Z, r24
 640:	01 c0       	rjmp	.+2      	; 0x644 <DIO_u8GetPinValue+0x104>
	break;

	default: Local_u8ErrorState = STD_TYPES_NOK;
 642:	1a 82       	std	Y+2, r1	; 0x02
	}


	return Local_u8ErrorState;
 644:	8a 81       	ldd	r24, Y+2	; 0x02
}
 646:	28 96       	adiw	r28, 0x08	; 8
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	f8 94       	cli
 64c:	de bf       	out	0x3e, r29	; 62
 64e:	0f be       	out	0x3f, r0	; 63
 650:	cd bf       	out	0x3d, r28	; 61
 652:	cf 91       	pop	r28
 654:	df 91       	pop	r29
 656:	08 95       	ret

00000658 <DIO_u8SetPortDirection>:

u8  DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
 658:	df 93       	push	r29
 65a:	cf 93       	push	r28
 65c:	cd b7       	in	r28, 0x3d	; 61
 65e:	de b7       	in	r29, 0x3e	; 62
 660:	2d 97       	sbiw	r28, 0x0d	; 13
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	de bf       	out	0x3e, r29	; 62
 668:	0f be       	out	0x3f, r0	; 63
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	8a 83       	std	Y+2, r24	; 0x02
 66e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
 674:	8b 81       	ldd	r24, Y+3	; 0x03
 676:	81 30       	cpi	r24, 0x01	; 1
 678:	21 f0       	breq	.+8      	; 0x682 <DIO_u8SetPortDirection+0x2a>
 67a:	8b 81       	ldd	r24, Y+3	; 0x03
 67c:	88 23       	and	r24, r24
 67e:	09 f0       	breq	.+2      	; 0x682 <DIO_u8SetPortDirection+0x2a>
 680:	7f c0       	rjmp	.+254    	; 0x780 <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	28 2f       	mov	r18, r24
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	3d 87       	std	Y+13, r19	; 0x0d
 68a:	2c 87       	std	Y+12, r18	; 0x0c
 68c:	8c 85       	ldd	r24, Y+12	; 0x0c
 68e:	9d 85       	ldd	r25, Y+13	; 0x0d
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	91 05       	cpc	r25, r1
 694:	71 f1       	breq	.+92     	; 0x6f2 <DIO_u8SetPortDirection+0x9a>
 696:	2c 85       	ldd	r18, Y+12	; 0x0c
 698:	3d 85       	ldd	r19, Y+13	; 0x0d
 69a:	22 30       	cpi	r18, 0x02	; 2
 69c:	31 05       	cpc	r19, r1
 69e:	2c f4       	brge	.+10     	; 0x6aa <DIO_u8SetPortDirection+0x52>
 6a0:	8c 85       	ldd	r24, Y+12	; 0x0c
 6a2:	9d 85       	ldd	r25, Y+13	; 0x0d
 6a4:	00 97       	sbiw	r24, 0x00	; 0
 6a6:	69 f0       	breq	.+26     	; 0x6c2 <DIO_u8SetPortDirection+0x6a>
 6a8:	69 c0       	rjmp	.+210    	; 0x77c <DIO_u8SetPortDirection+0x124>
 6aa:	2c 85       	ldd	r18, Y+12	; 0x0c
 6ac:	3d 85       	ldd	r19, Y+13	; 0x0d
 6ae:	22 30       	cpi	r18, 0x02	; 2
 6b0:	31 05       	cpc	r19, r1
 6b2:	b1 f1       	breq	.+108    	; 0x720 <DIO_u8SetPortDirection+0xc8>
 6b4:	8c 85       	ldd	r24, Y+12	; 0x0c
 6b6:	9d 85       	ldd	r25, Y+13	; 0x0d
 6b8:	83 30       	cpi	r24, 0x03	; 3
 6ba:	91 05       	cpc	r25, r1
 6bc:	09 f4       	brne	.+2      	; 0x6c0 <DIO_u8SetPortDirection+0x68>
 6be:	47 c0       	rjmp	.+142    	; 0x74e <DIO_u8SetPortDirection+0xf6>
 6c0:	5d c0       	rjmp	.+186    	; 0x77c <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PortDirection)
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	28 2f       	mov	r18, r24
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	3b 87       	std	Y+11, r19	; 0x0b
 6ca:	2a 87       	std	Y+10, r18	; 0x0a
 6cc:	8a 85       	ldd	r24, Y+10	; 0x0a
 6ce:	9b 85       	ldd	r25, Y+11	; 0x0b
 6d0:	00 97       	sbiw	r24, 0x00	; 0
 6d2:	59 f0       	breq	.+22     	; 0x6ea <DIO_u8SetPortDirection+0x92>
 6d4:	2a 85       	ldd	r18, Y+10	; 0x0a
 6d6:	3b 85       	ldd	r19, Y+11	; 0x0b
 6d8:	21 30       	cpi	r18, 0x01	; 1
 6da:	31 05       	cpc	r19, r1
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <DIO_u8SetPortDirection+0x88>
 6de:	51 c0       	rjmp	.+162    	; 0x782 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
 6e0:	ea e3       	ldi	r30, 0x3A	; 58
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	8f ef       	ldi	r24, 0xFF	; 255
 6e6:	80 83       	st	Z, r24
 6e8:	4c c0       	rjmp	.+152    	; 0x782 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
 6ea:	ea e3       	ldi	r30, 0x3A	; 58
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	10 82       	st	Z, r1
 6f0:	48 c0       	rjmp	.+144    	; 0x782 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PortDirection)
 6f2:	8b 81       	ldd	r24, Y+3	; 0x03
 6f4:	28 2f       	mov	r18, r24
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	39 87       	std	Y+9, r19	; 0x09
 6fa:	28 87       	std	Y+8, r18	; 0x08
 6fc:	88 85       	ldd	r24, Y+8	; 0x08
 6fe:	99 85       	ldd	r25, Y+9	; 0x09
 700:	00 97       	sbiw	r24, 0x00	; 0
 702:	51 f0       	breq	.+20     	; 0x718 <DIO_u8SetPortDirection+0xc0>
 704:	28 85       	ldd	r18, Y+8	; 0x08
 706:	39 85       	ldd	r19, Y+9	; 0x09
 708:	21 30       	cpi	r18, 0x01	; 1
 70a:	31 05       	cpc	r19, r1
 70c:	d1 f5       	brne	.+116    	; 0x782 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
 70e:	e7 e3       	ldi	r30, 0x37	; 55
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	8f ef       	ldi	r24, 0xFF	; 255
 714:	80 83       	st	Z, r24
 716:	35 c0       	rjmp	.+106    	; 0x782 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
 718:	e7 e3       	ldi	r30, 0x37	; 55
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	10 82       	st	Z, r1
 71e:	31 c0       	rjmp	.+98     	; 0x782 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PortDirection)
 720:	8b 81       	ldd	r24, Y+3	; 0x03
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	3f 83       	std	Y+7, r19	; 0x07
 728:	2e 83       	std	Y+6, r18	; 0x06
 72a:	8e 81       	ldd	r24, Y+6	; 0x06
 72c:	9f 81       	ldd	r25, Y+7	; 0x07
 72e:	00 97       	sbiw	r24, 0x00	; 0
 730:	51 f0       	breq	.+20     	; 0x746 <DIO_u8SetPortDirection+0xee>
 732:	2e 81       	ldd	r18, Y+6	; 0x06
 734:	3f 81       	ldd	r19, Y+7	; 0x07
 736:	21 30       	cpi	r18, 0x01	; 1
 738:	31 05       	cpc	r19, r1
 73a:	19 f5       	brne	.+70     	; 0x782 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
 73c:	e4 e3       	ldi	r30, 0x34	; 52
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	8f ef       	ldi	r24, 0xFF	; 255
 742:	80 83       	st	Z, r24
 744:	1e c0       	rjmp	.+60     	; 0x782 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
 746:	e4 e3       	ldi	r30, 0x34	; 52
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	10 82       	st	Z, r1
 74c:	1a c0       	rjmp	.+52     	; 0x782 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PortDirection)
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	28 2f       	mov	r18, r24
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	3d 83       	std	Y+5, r19	; 0x05
 756:	2c 83       	std	Y+4, r18	; 0x04
 758:	8c 81       	ldd	r24, Y+4	; 0x04
 75a:	9d 81       	ldd	r25, Y+5	; 0x05
 75c:	00 97       	sbiw	r24, 0x00	; 0
 75e:	51 f0       	breq	.+20     	; 0x774 <DIO_u8SetPortDirection+0x11c>
 760:	2c 81       	ldd	r18, Y+4	; 0x04
 762:	3d 81       	ldd	r19, Y+5	; 0x05
 764:	21 30       	cpi	r18, 0x01	; 1
 766:	31 05       	cpc	r19, r1
 768:	61 f4       	brne	.+24     	; 0x782 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
 76a:	e1 e3       	ldi	r30, 0x31	; 49
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	8f ef       	ldi	r24, 0xFF	; 255
 770:	80 83       	st	Z, r24
 772:	07 c0       	rjmp	.+14     	; 0x782 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
 774:	e1 e3       	ldi	r30, 0x31	; 49
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	10 82       	st	Z, r1
 77a:	03 c0       	rjmp	.+6      	; 0x782 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			default :Local_u8ErrorState = STD_TYPES_NOK;
 77c:	19 82       	std	Y+1, r1	; 0x01
 77e:	01 c0       	rjmp	.+2      	; 0x782 <DIO_u8SetPortDirection+0x12a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 780:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 782:	89 81       	ldd	r24, Y+1	; 0x01
}
 784:	2d 96       	adiw	r28, 0x0d	; 13
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	08 95       	ret

00000796 <DIO_u8SetPortValue>:

u8  DIO_u8SetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 796:	df 93       	push	r29
 798:	cf 93       	push	r28
 79a:	00 d0       	rcall	.+0      	; 0x79c <DIO_u8SetPortValue+0x6>
 79c:	00 d0       	rcall	.+0      	; 0x79e <DIO_u8SetPortValue+0x8>
 79e:	0f 92       	push	r0
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	8a 83       	std	Y+2, r24	; 0x02
 7a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
 7ac:	8a 81       	ldd	r24, Y+2	; 0x02
 7ae:	28 2f       	mov	r18, r24
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	3d 83       	std	Y+5, r19	; 0x05
 7b4:	2c 83       	std	Y+4, r18	; 0x04
 7b6:	8c 81       	ldd	r24, Y+4	; 0x04
 7b8:	9d 81       	ldd	r25, Y+5	; 0x05
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	91 05       	cpc	r25, r1
 7be:	d1 f0       	breq	.+52     	; 0x7f4 <DIO_u8SetPortValue+0x5e>
 7c0:	2c 81       	ldd	r18, Y+4	; 0x04
 7c2:	3d 81       	ldd	r19, Y+5	; 0x05
 7c4:	22 30       	cpi	r18, 0x02	; 2
 7c6:	31 05       	cpc	r19, r1
 7c8:	2c f4       	brge	.+10     	; 0x7d4 <DIO_u8SetPortValue+0x3e>
 7ca:	8c 81       	ldd	r24, Y+4	; 0x04
 7cc:	9d 81       	ldd	r25, Y+5	; 0x05
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	61 f0       	breq	.+24     	; 0x7ea <DIO_u8SetPortValue+0x54>
 7d2:	1f c0       	rjmp	.+62     	; 0x812 <DIO_u8SetPortValue+0x7c>
 7d4:	2c 81       	ldd	r18, Y+4	; 0x04
 7d6:	3d 81       	ldd	r19, Y+5	; 0x05
 7d8:	22 30       	cpi	r18, 0x02	; 2
 7da:	31 05       	cpc	r19, r1
 7dc:	81 f0       	breq	.+32     	; 0x7fe <DIO_u8SetPortValue+0x68>
 7de:	8c 81       	ldd	r24, Y+4	; 0x04
 7e0:	9d 81       	ldd	r25, Y+5	; 0x05
 7e2:	83 30       	cpi	r24, 0x03	; 3
 7e4:	91 05       	cpc	r25, r1
 7e6:	81 f0       	breq	.+32     	; 0x808 <DIO_u8SetPortValue+0x72>
 7e8:	14 c0       	rjmp	.+40     	; 0x812 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
 7ea:	eb e3       	ldi	r30, 0x3B	; 59
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	8b 81       	ldd	r24, Y+3	; 0x03
 7f0:	80 83       	st	Z, r24
 7f2:	10 c0       	rjmp	.+32     	; 0x814 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
 7f4:	e8 e3       	ldi	r30, 0x38	; 56
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	80 83       	st	Z, r24
 7fc:	0b c0       	rjmp	.+22     	; 0x814 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
 7fe:	e5 e3       	ldi	r30, 0x35	; 53
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	8b 81       	ldd	r24, Y+3	; 0x03
 804:	80 83       	st	Z, r24
 806:	06 c0       	rjmp	.+12     	; 0x814 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
 808:	e2 e3       	ldi	r30, 0x32	; 50
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	80 83       	st	Z, r24
 810:	01 c0       	rjmp	.+2      	; 0x814 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = STD_TYPES_NOK;
 812:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 814:	89 81       	ldd	r24, Y+1	; 0x01
}
 816:	0f 90       	pop	r0
 818:	0f 90       	pop	r0
 81a:	0f 90       	pop	r0
 81c:	0f 90       	pop	r0
 81e:	0f 90       	pop	r0
 820:	cf 91       	pop	r28
 822:	df 91       	pop	r29
 824:	08 95       	ret

00000826 <DIO_u8GetPortValue>:

u8  DIO_u8GetPortValue    (u8 Copy_u8PortId, u8 * Copy_pu8ReturnedPortValue)
{
 826:	df 93       	push	r29
 828:	cf 93       	push	r28
 82a:	00 d0       	rcall	.+0      	; 0x82c <DIO_u8GetPortValue+0x6>
 82c:	00 d0       	rcall	.+0      	; 0x82e <DIO_u8GetPortValue+0x8>
 82e:	00 d0       	rcall	.+0      	; 0x830 <DIO_u8GetPortValue+0xa>
 830:	cd b7       	in	r28, 0x3d	; 61
 832:	de b7       	in	r29, 0x3e	; 62
 834:	8a 83       	std	Y+2, r24	; 0x02
 836:	7c 83       	std	Y+4, r23	; 0x04
 838:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8ReturnedPortValue != NULL)
 83e:	8b 81       	ldd	r24, Y+3	; 0x03
 840:	9c 81       	ldd	r25, Y+4	; 0x04
 842:	00 97       	sbiw	r24, 0x00	; 0
 844:	e9 f1       	breq	.+122    	; 0x8c0 <__stack+0x61>
	{
		switch (Copy_u8PortId)
 846:	8a 81       	ldd	r24, Y+2	; 0x02
 848:	28 2f       	mov	r18, r24
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	3e 83       	std	Y+6, r19	; 0x06
 84e:	2d 83       	std	Y+5, r18	; 0x05
 850:	8d 81       	ldd	r24, Y+5	; 0x05
 852:	9e 81       	ldd	r25, Y+6	; 0x06
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	91 05       	cpc	r25, r1
 858:	e1 f0       	breq	.+56     	; 0x892 <__stack+0x33>
 85a:	2d 81       	ldd	r18, Y+5	; 0x05
 85c:	3e 81       	ldd	r19, Y+6	; 0x06
 85e:	22 30       	cpi	r18, 0x02	; 2
 860:	31 05       	cpc	r19, r1
 862:	2c f4       	brge	.+10     	; 0x86e <__stack+0xf>
 864:	8d 81       	ldd	r24, Y+5	; 0x05
 866:	9e 81       	ldd	r25, Y+6	; 0x06
 868:	00 97       	sbiw	r24, 0x00	; 0
 86a:	61 f0       	breq	.+24     	; 0x884 <__stack+0x25>
 86c:	27 c0       	rjmp	.+78     	; 0x8bc <__stack+0x5d>
 86e:	2d 81       	ldd	r18, Y+5	; 0x05
 870:	3e 81       	ldd	r19, Y+6	; 0x06
 872:	22 30       	cpi	r18, 0x02	; 2
 874:	31 05       	cpc	r19, r1
 876:	a1 f0       	breq	.+40     	; 0x8a0 <__stack+0x41>
 878:	8d 81       	ldd	r24, Y+5	; 0x05
 87a:	9e 81       	ldd	r25, Y+6	; 0x06
 87c:	83 30       	cpi	r24, 0x03	; 3
 87e:	91 05       	cpc	r25, r1
 880:	b1 f0       	breq	.+44     	; 0x8ae <__stack+0x4f>
 882:	1c c0       	rjmp	.+56     	; 0x8bc <__stack+0x5d>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
 884:	e9 e3       	ldi	r30, 0x39	; 57
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 81       	ld	r24, Z
 88a:	eb 81       	ldd	r30, Y+3	; 0x03
 88c:	fc 81       	ldd	r31, Y+4	; 0x04
 88e:	80 83       	st	Z, r24
 890:	18 c0       	rjmp	.+48     	; 0x8c2 <__stack+0x63>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
 892:	e6 e3       	ldi	r30, 0x36	; 54
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	eb 81       	ldd	r30, Y+3	; 0x03
 89a:	fc 81       	ldd	r31, Y+4	; 0x04
 89c:	80 83       	st	Z, r24
 89e:	11 c0       	rjmp	.+34     	; 0x8c2 <__stack+0x63>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
 8a0:	e3 e3       	ldi	r30, 0x33	; 51
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	eb 81       	ldd	r30, Y+3	; 0x03
 8a8:	fc 81       	ldd	r31, Y+4	; 0x04
 8aa:	80 83       	st	Z, r24
 8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <__stack+0x63>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
 8ae:	e0 e3       	ldi	r30, 0x30	; 48
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	eb 81       	ldd	r30, Y+3	; 0x03
 8b6:	fc 81       	ldd	r31, Y+4	; 0x04
 8b8:	80 83       	st	Z, r24
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <__stack+0x63>
			default : Local_u8ErrorState = STD_TYPES_NOK;
 8bc:	19 82       	std	Y+1, r1	; 0x01
 8be:	01 c0       	rjmp	.+2      	; 0x8c2 <__stack+0x63>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 8c0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
}
 8c4:	26 96       	adiw	r28, 0x06	; 6
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	f8 94       	cli
 8ca:	de bf       	out	0x3e, r29	; 62
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	cd bf       	out	0x3d, r28	; 61
 8d0:	cf 91       	pop	r28
 8d2:	df 91       	pop	r29
 8d4:	08 95       	ret

000008d6 <delay_ms>:
#include "LIB/STD_TYPES.h"
#include "delay.h"

void delay_ms(u32 ms)
{
 8d6:	df 93       	push	r29
 8d8:	cf 93       	push	r28
 8da:	cd b7       	in	r28, 0x3d	; 61
 8dc:	de b7       	in	r29, 0x3e	; 62
 8de:	2c 97       	sbiw	r28, 0x0c	; 12
 8e0:	0f b6       	in	r0, 0x3f	; 63
 8e2:	f8 94       	cli
 8e4:	de bf       	out	0x3e, r29	; 62
 8e6:	0f be       	out	0x3f, r0	; 63
 8e8:	cd bf       	out	0x3d, r28	; 61
 8ea:	69 87       	std	Y+9, r22	; 0x09
 8ec:	7a 87       	std	Y+10, r23	; 0x0a
 8ee:	8b 87       	std	Y+11, r24	; 0x0b
 8f0:	9c 87       	std	Y+12, r25	; 0x0c
	for (u32 i = 0; i < ms; i++)
 8f2:	1d 82       	std	Y+5, r1	; 0x05
 8f4:	1e 82       	std	Y+6, r1	; 0x06
 8f6:	1f 82       	std	Y+7, r1	; 0x07
 8f8:	18 86       	std	Y+8, r1	; 0x08
 8fa:	25 c0       	rjmp	.+74     	; 0x946 <delay_ms+0x70>
	{
		for (u32 j = 0; j < 225; j++)
 8fc:	19 82       	std	Y+1, r1	; 0x01
 8fe:	1a 82       	std	Y+2, r1	; 0x02
 900:	1b 82       	std	Y+3, r1	; 0x03
 902:	1c 82       	std	Y+4, r1	; 0x04
 904:	0c c0       	rjmp	.+24     	; 0x91e <delay_ms+0x48>
			asm("NOP");
 906:	00 00       	nop

void delay_ms(u32 ms)
{
	for (u32 i = 0; i < ms; i++)
	{
		for (u32 j = 0; j < 225; j++)
 908:	89 81       	ldd	r24, Y+1	; 0x01
 90a:	9a 81       	ldd	r25, Y+2	; 0x02
 90c:	ab 81       	ldd	r26, Y+3	; 0x03
 90e:	bc 81       	ldd	r27, Y+4	; 0x04
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	a1 1d       	adc	r26, r1
 914:	b1 1d       	adc	r27, r1
 916:	89 83       	std	Y+1, r24	; 0x01
 918:	9a 83       	std	Y+2, r25	; 0x02
 91a:	ab 83       	std	Y+3, r26	; 0x03
 91c:	bc 83       	std	Y+4, r27	; 0x04
 91e:	89 81       	ldd	r24, Y+1	; 0x01
 920:	9a 81       	ldd	r25, Y+2	; 0x02
 922:	ab 81       	ldd	r26, Y+3	; 0x03
 924:	bc 81       	ldd	r27, Y+4	; 0x04
 926:	81 3e       	cpi	r24, 0xE1	; 225
 928:	91 05       	cpc	r25, r1
 92a:	a1 05       	cpc	r26, r1
 92c:	b1 05       	cpc	r27, r1
 92e:	58 f3       	brcs	.-42     	; 0x906 <delay_ms+0x30>
#include "LIB/STD_TYPES.h"
#include "delay.h"

void delay_ms(u32 ms)
{
	for (u32 i = 0; i < ms; i++)
 930:	8d 81       	ldd	r24, Y+5	; 0x05
 932:	9e 81       	ldd	r25, Y+6	; 0x06
 934:	af 81       	ldd	r26, Y+7	; 0x07
 936:	b8 85       	ldd	r27, Y+8	; 0x08
 938:	01 96       	adiw	r24, 0x01	; 1
 93a:	a1 1d       	adc	r26, r1
 93c:	b1 1d       	adc	r27, r1
 93e:	8d 83       	std	Y+5, r24	; 0x05
 940:	9e 83       	std	Y+6, r25	; 0x06
 942:	af 83       	std	Y+7, r26	; 0x07
 944:	b8 87       	std	Y+8, r27	; 0x08
 946:	2d 81       	ldd	r18, Y+5	; 0x05
 948:	3e 81       	ldd	r19, Y+6	; 0x06
 94a:	4f 81       	ldd	r20, Y+7	; 0x07
 94c:	58 85       	ldd	r21, Y+8	; 0x08
 94e:	89 85       	ldd	r24, Y+9	; 0x09
 950:	9a 85       	ldd	r25, Y+10	; 0x0a
 952:	ab 85       	ldd	r26, Y+11	; 0x0b
 954:	bc 85       	ldd	r27, Y+12	; 0x0c
 956:	28 17       	cp	r18, r24
 958:	39 07       	cpc	r19, r25
 95a:	4a 07       	cpc	r20, r26
 95c:	5b 07       	cpc	r21, r27
 95e:	70 f2       	brcs	.-100    	; 0x8fc <delay_ms+0x26>
	{
		for (u32 j = 0; j < 225; j++)
			asm("NOP");
	}
}
 960:	2c 96       	adiw	r28, 0x0c	; 12
 962:	0f b6       	in	r0, 0x3f	; 63
 964:	f8 94       	cli
 966:	de bf       	out	0x3e, r29	; 62
 968:	0f be       	out	0x3f, r0	; 63
 96a:	cd bf       	out	0x3d, r28	; 61
 96c:	cf 91       	pop	r28
 96e:	df 91       	pop	r29
 970:	08 95       	ret

00000972 <SSD_voidInit>:

#include "MCAL/DIO/DIO_interface.h"
#include "MCAL/DIO/DIO_private.h"

void SSD_voidInit()
{
 972:	df 93       	push	r29
 974:	cf 93       	push	r28
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(DIO_u8_DDRA_REG, DIO_u8_OUTPUT);
 97a:	ea e3       	ldi	r30, 0x3A	; 58
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
 980:	61 e0       	ldi	r22, 0x01	; 1
 982:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_u8SetPortDirection>
}
 986:	cf 91       	pop	r28
 988:	df 91       	pop	r29
 98a:	08 95       	ret

0000098c <SSD_voidEnable>:
void SSD_voidEnable()
{
 98c:	df 93       	push	r29
 98e:	cf 93       	push	r28
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
	if (SSD_TYPE == SSD_COMMON_ANODE)
	{
		DIO_u8SetPinValue(SSD_u8_PORT, SSD_u8_ENABLE_PIN ,SSD_u8_HIGH);
	}
	else
		DIO_u8SetPinValue(SSD_u8_PORT, SSD_u8_ENABLE_PIN ,SSD_u8_LOW);
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	67 e0       	ldi	r22, 0x07	; 7
 998:	40 e0       	ldi	r20, 0x00	; 0
 99a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
}
 99e:	cf 91       	pop	r28
 9a0:	df 91       	pop	r29
 9a2:	08 95       	ret

000009a4 <SSD_voidDisable>:
void SSD_voidDisable()
{
 9a4:	df 93       	push	r29
 9a6:	cf 93       	push	r28
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
	if (SSD_TYPE == SSD_COMMON_ANODE)
	{
		DIO_u8SetPinValue(SSD_u8_PORT, SSD_u8_ENABLE_PIN ,SSD_u8_LOW);
	}
	else
		DIO_u8SetPinValue(SSD_u8_PORT, SSD_u8_ENABLE_PIN ,SSD_u8_HIGH);
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	67 e0       	ldi	r22, 0x07	; 7
 9b0:	41 e0       	ldi	r20, 0x01	; 1
 9b2:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
}
 9b6:	cf 91       	pop	r28
 9b8:	df 91       	pop	r29
 9ba:	08 95       	ret

000009bc <SSD_voidWrite>:
void SSD_voidWrite(u8 Copy_u8Digit)
{
 9bc:	df 93       	push	r29
 9be:	cf 93       	push	r28
 9c0:	00 d0       	rcall	.+0      	; 0x9c2 <SSD_voidWrite+0x6>
 9c2:	00 d0       	rcall	.+0      	; 0x9c4 <SSD_voidWrite+0x8>
 9c4:	cd b7       	in	r28, 0x3d	; 61
 9c6:	de b7       	in	r29, 0x3e	; 62
 9c8:	8c 83       	std	Y+4, r24	; 0x04
		u8 patternBits = 0;
 9ca:	1b 82       	std	Y+3, r1	; 0x03
		for (u8 i = 0; i <= 6; i++)
 9cc:	19 82       	std	Y+1, r1	; 0x01
 9ce:	28 c0       	rjmp	.+80     	; 0xa20 <SSD_voidWrite+0x64>
		{
			patternBits |= ((SSD_Digits[Copy_u8Digit][i]) << i);
 9d0:	8c 81       	ldd	r24, Y+4	; 0x04
 9d2:	28 2f       	mov	r18, r24
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	89 81       	ldd	r24, Y+1	; 0x01
 9d8:	48 2f       	mov	r20, r24
 9da:	50 e0       	ldi	r21, 0x00	; 0
 9dc:	c9 01       	movw	r24, r18
 9de:	88 0f       	add	r24, r24
 9e0:	99 1f       	adc	r25, r25
 9e2:	88 0f       	add	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	82 1b       	sub	r24, r18
 9ec:	93 0b       	sbc	r25, r19
 9ee:	84 0f       	add	r24, r20
 9f0:	95 1f       	adc	r25, r21
 9f2:	fc 01       	movw	r30, r24
 9f4:	e0 5a       	subi	r30, 0xA0	; 160
 9f6:	ff 4f       	sbci	r31, 0xFF	; 255
 9f8:	80 81       	ld	r24, Z
 9fa:	28 2f       	mov	r18, r24
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	89 81       	ldd	r24, Y+1	; 0x01
 a00:	88 2f       	mov	r24, r24
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	a9 01       	movw	r20, r18
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <SSD_voidWrite+0x50>
 a08:	44 0f       	add	r20, r20
 a0a:	55 1f       	adc	r21, r21
 a0c:	8a 95       	dec	r24
 a0e:	e2 f7       	brpl	.-8      	; 0xa08 <SSD_voidWrite+0x4c>
 a10:	ca 01       	movw	r24, r20
 a12:	98 2f       	mov	r25, r24
 a14:	8b 81       	ldd	r24, Y+3	; 0x03
 a16:	89 2b       	or	r24, r25
 a18:	8b 83       	std	Y+3, r24	; 0x03
		DIO_u8SetPinValue(SSD_u8_PORT, SSD_u8_ENABLE_PIN ,SSD_u8_HIGH);
}
void SSD_voidWrite(u8 Copy_u8Digit)
{
		u8 patternBits = 0;
		for (u8 i = 0; i <= 6; i++)
 a1a:	89 81       	ldd	r24, Y+1	; 0x01
 a1c:	8f 5f       	subi	r24, 0xFF	; 255
 a1e:	89 83       	std	Y+1, r24	; 0x01
 a20:	89 81       	ldd	r24, Y+1	; 0x01
 a22:	87 30       	cpi	r24, 0x07	; 7
 a24:	a8 f2       	brcs	.-86     	; 0x9d0 <SSD_voidWrite+0x14>
			DIO_u8GetPortValue(SSD_u8_PORT,&Copy_pu8ReturnedPortValue);
			// flip bits and keep LSB 1
			patternBits = (~patternBits & SSD_u8_MASK);
			patternBits |= (Copy_pu8ReturnedPortValue & 0x80);
		}
		DIO_u8SetPortValue(SSD_u8_PORT, patternBits);
 a26:	80 e0       	ldi	r24, 0x00	; 0
 a28:	6b 81       	ldd	r22, Y+3	; 0x03
 a2a:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPortValue>

}
 a2e:	0f 90       	pop	r0
 a30:	0f 90       	pop	r0
 a32:	0f 90       	pop	r0
 a34:	0f 90       	pop	r0
 a36:	cf 91       	pop	r28
 a38:	df 91       	pop	r29
 a3a:	08 95       	ret

00000a3c <LCD_voidSendInstruction>:
#include "LCD_private.h"
#include "LCD_config.h"


void LCD_voidSendInstruction(u8 Copy_u8instruction)
{
 a3c:	df 93       	push	r29
 a3e:	cf 93       	push	r28
 a40:	0f 92       	push	r0
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
 a46:	89 83       	std	Y+1, r24	; 0x01
   DIO_u8SetPinValue(LCD_u8_RS_PORT, LCD_u8_RSPIN ,DIO_u8_LOW);
 a48:	83 e0       	ldi	r24, 0x03	; 3
 a4a:	60 e0       	ldi	r22, 0x00	; 0
 a4c:	40 e0       	ldi	r20, 0x00	; 0
 a4e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
   DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_RWPIN ,DIO_u8_LOW);
 a52:	83 e0       	ldi	r24, 0x03	; 3
 a54:	62 e0       	ldi	r22, 0x02	; 2
 a56:	40 e0       	ldi	r20, 0x00	; 0
 a58:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
   DIO_u8SetPinValue(LCD_u8_ENABLE_PORT, LCD_u8_EPIN ,DIO_u8_HIGH);
 a5c:	83 e0       	ldi	r24, 0x03	; 3
 a5e:	61 e0       	ldi	r22, 0x01	; 1
 a60:	41 e0       	ldi	r20, 0x01	; 1
 a62:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
   DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8instruction);
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	69 81       	ldd	r22, Y+1	; 0x01
 a6a:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPortValue>
   delay_ms(2);
 a6e:	62 e0       	ldi	r22, 0x02	; 2
 a70:	70 e0       	ldi	r23, 0x00	; 0
 a72:	80 e0       	ldi	r24, 0x00	; 0
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay_ms>
   DIO_u8SetPinValue(LCD_u8_ENABLE_PORT, LCD_u8_EPIN ,DIO_u8_LOW);
 a7a:	83 e0       	ldi	r24, 0x03	; 3
 a7c:	61 e0       	ldi	r22, 0x01	; 1
 a7e:	40 e0       	ldi	r20, 0x00	; 0
 a80:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>

}
 a84:	0f 90       	pop	r0
 a86:	cf 91       	pop	r28
 a88:	df 91       	pop	r29
 a8a:	08 95       	ret

00000a8c <LCD_voidInit>:
void LCD_voidInit()
{
 a8c:	df 93       	push	r29
 a8e:	cf 93       	push	r28
 a90:	cd b7       	in	r28, 0x3d	; 61
 a92:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(LCD_u8_CTRL_PORT, LCD_u8_RSPIN, DIO_u8_OUTPUT);
 a94:	83 e0       	ldi	r24, 0x03	; 3
 a96:	60 e0       	ldi	r22, 0x00	; 0
 a98:	41 e0       	ldi	r20, 0x01	; 1
 a9a:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_u8_CTRL_PORT, LCD_u8_RWPIN, DIO_u8_OUTPUT);
 a9e:	83 e0       	ldi	r24, 0x03	; 3
 aa0:	62 e0       	ldi	r22, 0x02	; 2
 aa2:	41 e0       	ldi	r20, 0x01	; 1
 aa4:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LCD_u8_CTRL_PORT, LCD_u8_EPIN, DIO_u8_OUTPUT);
 aa8:	83 e0       	ldi	r24, 0x03	; 3
 aaa:	61 e0       	ldi	r22, 0x01	; 1
 aac:	41 e0       	ldi	r20, 0x01	; 1
 aae:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_u8SetPinDirection>

	DIO_u8SetPortDirection(LCD_u8_DATA_PORT,0xff);
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	6f ef       	ldi	r22, 0xFF	; 255
 ab6:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_u8SetPortDirection>
	delay_ms(60);
 aba:	6c e3       	ldi	r22, 0x3C	; 60
 abc:	70 e0       	ldi	r23, 0x00	; 0
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay_ms>
	LCD_voidSendInstruction(0b00111100);
 ac6:	8c e3       	ldi	r24, 0x3C	; 60
 ac8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <LCD_voidSendInstruction>
	delay_ms(2);
 acc:	62 e0       	ldi	r22, 0x02	; 2
 ace:	70 e0       	ldi	r23, 0x00	; 0
 ad0:	80 e0       	ldi	r24, 0x00	; 0
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay_ms>
	LCD_voidSendInstruction(0b00001100);
 ad8:	8c e0       	ldi	r24, 0x0C	; 12
 ada:	0e 94 1e 05 	call	0xa3c	; 0xa3c <LCD_voidSendInstruction>
	delay_ms(2);
 ade:	62 e0       	ldi	r22, 0x02	; 2
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	80 e0       	ldi	r24, 0x00	; 0
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay_ms>
	LCD_voidSendInstruction(CLEAR_SCREAN);
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	0e 94 1e 05 	call	0xa3c	; 0xa3c <LCD_voidSendInstruction>
	delay_ms(2);
 af0:	62 e0       	ldi	r22, 0x02	; 2
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay_ms>
	LCD_voidSendInstruction(0b00000110);
 afc:	86 e0       	ldi	r24, 0x06	; 6
 afe:	0e 94 1e 05 	call	0xa3c	; 0xa3c <LCD_voidSendInstruction>
	delay_ms(2);
 b02:	62 e0       	ldi	r22, 0x02	; 2
 b04:	70 e0       	ldi	r23, 0x00	; 0
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay_ms>
}
 b0e:	cf 91       	pop	r28
 b10:	df 91       	pop	r29
 b12:	08 95       	ret

00000b14 <LCD_voidWriteChar>:
void LCD_voidWriteChar(u8 Copy_u8char)
{
 b14:	df 93       	push	r29
 b16:	cf 93       	push	r28
 b18:	0f 92       	push	r0
 b1a:	cd b7       	in	r28, 0x3d	; 61
 b1c:	de b7       	in	r29, 0x3e	; 62
 b1e:	89 83       	std	Y+1, r24	; 0x01
   DIO_u8SetPinValue(LCD_u8_RS_PORT, LCD_u8_RSPIN ,DIO_u8_HIGH);
 b20:	83 e0       	ldi	r24, 0x03	; 3
 b22:	60 e0       	ldi	r22, 0x00	; 0
 b24:	41 e0       	ldi	r20, 0x01	; 1
 b26:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
   DIO_u8SetPinValue(LCD_u8_CTRL_PORT, LCD_u8_RWPIN ,DIO_u8_LOW);
 b2a:	83 e0       	ldi	r24, 0x03	; 3
 b2c:	62 e0       	ldi	r22, 0x02	; 2
 b2e:	40 e0       	ldi	r20, 0x00	; 0
 b30:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
   DIO_u8SetPinValue(LCD_u8_ENABLE_PORT, LCD_u8_EPIN ,DIO_u8_HIGH);
 b34:	83 e0       	ldi	r24, 0x03	; 3
 b36:	61 e0       	ldi	r22, 0x01	; 1
 b38:	41 e0       	ldi	r20, 0x01	; 1
 b3a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
   DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8char);
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	69 81       	ldd	r22, Y+1	; 0x01
 b42:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPortValue>
   delay_ms(2);
 b46:	62 e0       	ldi	r22, 0x02	; 2
 b48:	70 e0       	ldi	r23, 0x00	; 0
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay_ms>
   DIO_u8SetPinValue(LCD_u8_ENABLE_PORT, LCD_u8_EPIN ,DIO_u8_LOW);
 b52:	83 e0       	ldi	r24, 0x03	; 3
 b54:	61 e0       	ldi	r22, 0x01	; 1
 b56:	40 e0       	ldi	r20, 0x00	; 0
 b58:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>

}
 b5c:	0f 90       	pop	r0
 b5e:	cf 91       	pop	r28
 b60:	df 91       	pop	r29
 b62:	08 95       	ret

00000b64 <LCD_SetPos>:
void LCD_SetPos(u8 x, u8 y)
{
 b64:	df 93       	push	r29
 b66:	cf 93       	push	r28
 b68:	00 d0       	rcall	.+0      	; 0xb6a <LCD_SetPos+0x6>
 b6a:	cd b7       	in	r28, 0x3d	; 61
 b6c:	de b7       	in	r29, 0x3e	; 62
 b6e:	89 83       	std	Y+1, r24	; 0x01
 b70:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidSendInstruction(0x80 + 0x40*y + x);
 b72:	8a 81       	ldd	r24, Y+2	; 0x02
 b74:	88 2f       	mov	r24, r24
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	02 96       	adiw	r24, 0x02	; 2
 b7a:	00 24       	eor	r0, r0
 b7c:	96 95       	lsr	r25
 b7e:	87 95       	ror	r24
 b80:	07 94       	ror	r0
 b82:	96 95       	lsr	r25
 b84:	87 95       	ror	r24
 b86:	07 94       	ror	r0
 b88:	98 2f       	mov	r25, r24
 b8a:	80 2d       	mov	r24, r0
 b8c:	98 2f       	mov	r25, r24
 b8e:	89 81       	ldd	r24, Y+1	; 0x01
 b90:	89 0f       	add	r24, r25
 b92:	0e 94 1e 05 	call	0xa3c	; 0xa3c <LCD_voidSendInstruction>
}
 b96:	0f 90       	pop	r0
 b98:	0f 90       	pop	r0
 b9a:	cf 91       	pop	r28
 b9c:	df 91       	pop	r29
 b9e:	08 95       	ret

00000ba0 <LCD_voidWriteString>:
void LCD_voidWriteString(u8* str)
{
 ba0:	df 93       	push	r29
 ba2:	cf 93       	push	r28
 ba4:	00 d0       	rcall	.+0      	; 0xba6 <LCD_voidWriteString+0x6>
 ba6:	0f 92       	push	r0
 ba8:	cd b7       	in	r28, 0x3d	; 61
 baa:	de b7       	in	r29, 0x3e	; 62
 bac:	9b 83       	std	Y+3, r25	; 0x03
 bae:	8a 83       	std	Y+2, r24	; 0x02
	u8 count = 0;
 bb0:	19 82       	std	Y+1, r1	; 0x01
 bb2:	15 c0       	rjmp	.+42     	; 0xbde <LCD_voidWriteString+0x3e>
	while (*str != '\0')
	{
		LCD_voidWriteChar(*str);
 bb4:	ea 81       	ldd	r30, Y+2	; 0x02
 bb6:	fb 81       	ldd	r31, Y+3	; 0x03
 bb8:	80 81       	ld	r24, Z
 bba:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_voidWriteChar>
		str++;
 bbe:	8a 81       	ldd	r24, Y+2	; 0x02
 bc0:	9b 81       	ldd	r25, Y+3	; 0x03
 bc2:	01 96       	adiw	r24, 0x01	; 1
 bc4:	9b 83       	std	Y+3, r25	; 0x03
 bc6:	8a 83       	std	Y+2, r24	; 0x02
		count++;
 bc8:	89 81       	ldd	r24, Y+1	; 0x01
 bca:	8f 5f       	subi	r24, 0xFF	; 255
 bcc:	89 83       	std	Y+1, r24	; 0x01
		if (count == 16)
 bce:	89 81       	ldd	r24, Y+1	; 0x01
 bd0:	80 31       	cpi	r24, 0x10	; 16
 bd2:	29 f4       	brne	.+10     	; 0xbde <LCD_voidWriteString+0x3e>
		{
			LCD_SetPos(0,1);
 bd4:	80 e0       	ldi	r24, 0x00	; 0
 bd6:	61 e0       	ldi	r22, 0x01	; 1
 bd8:	0e 94 b2 05 	call	0xb64	; 0xb64 <LCD_SetPos>
			count = 0;
 bdc:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidSendInstruction(0x80 + 0x40*y + x);
}
void LCD_voidWriteString(u8* str)
{
	u8 count = 0;
	while (*str != '\0')
 bde:	ea 81       	ldd	r30, Y+2	; 0x02
 be0:	fb 81       	ldd	r31, Y+3	; 0x03
 be2:	80 81       	ld	r24, Z
 be4:	88 23       	and	r24, r24
 be6:	31 f7       	brne	.-52     	; 0xbb4 <LCD_voidWriteString+0x14>
		{
			LCD_SetPos(0,1);
			count = 0;
		}
	}
}
 be8:	0f 90       	pop	r0
 bea:	0f 90       	pop	r0
 bec:	0f 90       	pop	r0
 bee:	cf 91       	pop	r28
 bf0:	df 91       	pop	r29
 bf2:	08 95       	ret

00000bf4 <KPD_voidInit>:

u8 KPD_Au8RowsPin[4] = {KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
u8 KPD_Au8ColsPin[4] = {KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

void KPD_voidInit()
{
 bf4:	df 93       	push	r29
 bf6:	cf 93       	push	r28
 bf8:	00 d0       	rcall	.+0      	; 0xbfa <KPD_voidInit+0x6>
 bfa:	cd b7       	in	r28, 0x3d	; 61
 bfc:	de b7       	in	r29, 0x3e	; 62
	for (u8 i = 0; i <= 3; i++)
 bfe:	1a 82       	std	Y+2, r1	; 0x02
 c00:	08 c0       	rjmp	.+16     	; 0xc12 <KPD_voidInit+0x1e>
		DIO_u8SetPinValue(KPD_u8_PORT, i ,DIO_u8_LOW);
 c02:	82 e0       	ldi	r24, 0x02	; 2
 c04:	6a 81       	ldd	r22, Y+2	; 0x02
 c06:	40 e0       	ldi	r20, 0x00	; 0
 c08:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
u8 KPD_Au8RowsPin[4] = {KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
u8 KPD_Au8ColsPin[4] = {KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

void KPD_voidInit()
{
	for (u8 i = 0; i <= 3; i++)
 c0c:	8a 81       	ldd	r24, Y+2	; 0x02
 c0e:	8f 5f       	subi	r24, 0xFF	; 255
 c10:	8a 83       	std	Y+2, r24	; 0x02
 c12:	8a 81       	ldd	r24, Y+2	; 0x02
 c14:	84 30       	cpi	r24, 0x04	; 4
 c16:	a8 f3       	brcs	.-22     	; 0xc02 <KPD_voidInit+0xe>
		DIO_u8SetPinValue(KPD_u8_PORT, i ,DIO_u8_LOW);
	for (u8 i = 4; i <= 7; i++)
 c18:	84 e0       	ldi	r24, 0x04	; 4
 c1a:	89 83       	std	Y+1, r24	; 0x01
 c1c:	08 c0       	rjmp	.+16     	; 0xc2e <KPD_voidInit+0x3a>
		DIO_u8SetPinValue(KPD_u8_PORT, i ,DIO_u8_HIGH);
 c1e:	82 e0       	ldi	r24, 0x02	; 2
 c20:	69 81       	ldd	r22, Y+1	; 0x01
 c22:	41 e0       	ldi	r20, 0x01	; 1
 c24:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>

void KPD_voidInit()
{
	for (u8 i = 0; i <= 3; i++)
		DIO_u8SetPinValue(KPD_u8_PORT, i ,DIO_u8_LOW);
	for (u8 i = 4; i <= 7; i++)
 c28:	89 81       	ldd	r24, Y+1	; 0x01
 c2a:	8f 5f       	subi	r24, 0xFF	; 255
 c2c:	89 83       	std	Y+1, r24	; 0x01
 c2e:	89 81       	ldd	r24, Y+1	; 0x01
 c30:	88 30       	cpi	r24, 0x08	; 8
 c32:	a8 f3       	brcs	.-22     	; 0xc1e <KPD_voidInit+0x2a>
		DIO_u8SetPinValue(KPD_u8_PORT, i ,DIO_u8_HIGH);
}
 c34:	0f 90       	pop	r0
 c36:	0f 90       	pop	r0
 c38:	cf 91       	pop	r28
 c3a:	df 91       	pop	r29
 c3c:	08 95       	ret

00000c3e <KPD_u8GetKeyState>:

u8 KPD_u8GetKeyState(u8* Copy_pu8ReturnedKey)
{
 c3e:	df 93       	push	r29
 c40:	cf 93       	push	r28
 c42:	cd b7       	in	r28, 0x3d	; 61
 c44:	de b7       	in	r29, 0x3e	; 62
 c46:	27 97       	sbiw	r28, 0x07	; 7
 c48:	0f b6       	in	r0, 0x3f	; 63
 c4a:	f8 94       	cli
 c4c:	de bf       	out	0x3e, r29	; 62
 c4e:	0f be       	out	0x3f, r0	; 63
 c50:	cd bf       	out	0x3d, r28	; 61
 c52:	9f 83       	std	Y+7, r25	; 0x07
 c54:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
 c56:	81 e0       	ldi	r24, 0x01	; 1
 c58:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8RowsCounter;
	u8 Local_u8ColsCounter;
	u8 Local_u8PinValue;
	u8 Local_u8Flag = 0;
 c5a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8ReturnedKey != NULL)
 c5c:	8e 81       	ldd	r24, Y+6	; 0x06
 c5e:	9f 81       	ldd	r25, Y+7	; 0x07
 c60:	00 97       	sbiw	r24, 0x00	; 0
 c62:	09 f4       	brne	.+2      	; 0xc66 <KPD_u8GetKeyState+0x28>
 c64:	84 c0       	rjmp	.+264    	; 0xd6e <KPD_u8GetKeyState+0x130>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
 c66:	ee 81       	ldd	r30, Y+6	; 0x06
 c68:	ff 81       	ldd	r31, Y+7	; 0x07
 c6a:	8f ef       	ldi	r24, 0xFF	; 255
 c6c:	80 83       	st	Z, r24
		/* Activation for row pins */
		for (Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++)
 c6e:	1b 82       	std	Y+3, r1	; 0x03
 c70:	79 c0       	rjmp	.+242    	; 0xd64 <KPD_u8GetKeyState+0x126>
		{
			DIO_u8SetPinValue(KPD_u8_PORT, KPD_Au8RowsPin[Local_u8RowsCounter] ,DIO_u8_LOW);
 c72:	8b 81       	ldd	r24, Y+3	; 0x03
 c74:	88 2f       	mov	r24, r24
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	fc 01       	movw	r30, r24
 c7a:	ea 54       	subi	r30, 0x4A	; 74
 c7c:	ff 4f       	sbci	r31, 0xFF	; 255
 c7e:	90 81       	ld	r25, Z
 c80:	82 e0       	ldi	r24, 0x02	; 2
 c82:	69 2f       	mov	r22, r25
 c84:	40 e0       	ldi	r20, 0x00	; 0
 c86:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter < 4; Local_u8ColsCounter++)
 c8a:	1a 82       	std	Y+2, r1	; 0x02
 c8c:	55 c0       	rjmp	.+170    	; 0xd38 <KPD_u8GetKeyState+0xfa>
			{
				DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColsPin[Local_u8ColsCounter], &Local_u8PinValue);
 c8e:	8a 81       	ldd	r24, Y+2	; 0x02
 c90:	88 2f       	mov	r24, r24
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	fc 01       	movw	r30, r24
 c96:	e6 54       	subi	r30, 0x46	; 70
 c98:	ff 4f       	sbci	r31, 0xFF	; 255
 c9a:	90 81       	ld	r25, Z
 c9c:	9e 01       	movw	r18, r28
 c9e:	2b 5f       	subi	r18, 0xFB	; 251
 ca0:	3f 4f       	sbci	r19, 0xFF	; 255
 ca2:	82 e0       	ldi	r24, 0x02	; 2
 ca4:	69 2f       	mov	r22, r25
 ca6:	a9 01       	movw	r20, r18
 ca8:	0e 94 a0 02 	call	0x540	; 0x540 <DIO_u8GetPinValue>
				if (Local_u8PinValue == DIO_u8_LOW)
 cac:	8d 81       	ldd	r24, Y+5	; 0x05
 cae:	88 23       	and	r24, r24
 cb0:	09 f0       	breq	.+2      	; 0xcb4 <KPD_u8GetKeyState+0x76>
 cb2:	3f c0       	rjmp	.+126    	; 0xd32 <KPD_u8GetKeyState+0xf4>
				{
					/* Debouncing */
					delay_ms(20);
 cb4:	64 e1       	ldi	r22, 0x14	; 20
 cb6:	70 e0       	ldi	r23, 0x00	; 0
 cb8:	80 e0       	ldi	r24, 0x00	; 0
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <delay_ms>
					DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColsPin[Local_u8ColsCounter], &Local_u8PinValue);
 cc0:	8a 81       	ldd	r24, Y+2	; 0x02
 cc2:	88 2f       	mov	r24, r24
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	fc 01       	movw	r30, r24
 cc8:	e6 54       	subi	r30, 0x46	; 70
 cca:	ff 4f       	sbci	r31, 0xFF	; 255
 ccc:	90 81       	ld	r25, Z
 cce:	9e 01       	movw	r18, r28
 cd0:	2b 5f       	subi	r18, 0xFB	; 251
 cd2:	3f 4f       	sbci	r19, 0xFF	; 255
 cd4:	82 e0       	ldi	r24, 0x02	; 2
 cd6:	69 2f       	mov	r22, r25
 cd8:	a9 01       	movw	r20, r18
 cda:	0e 94 a0 02 	call	0x540	; 0x540 <DIO_u8GetPinValue>
 cde:	0f c0       	rjmp	.+30     	; 0xcfe <KPD_u8GetKeyState+0xc0>
					/* Check if the pin still low */
					while (Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColsPin[Local_u8ColsCounter], &Local_u8PinValue);
 ce0:	8a 81       	ldd	r24, Y+2	; 0x02
 ce2:	88 2f       	mov	r24, r24
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	fc 01       	movw	r30, r24
 ce8:	e6 54       	subi	r30, 0x46	; 70
 cea:	ff 4f       	sbci	r31, 0xFF	; 255
 cec:	90 81       	ld	r25, Z
 cee:	9e 01       	movw	r18, r28
 cf0:	2b 5f       	subi	r18, 0xFB	; 251
 cf2:	3f 4f       	sbci	r19, 0xFF	; 255
 cf4:	82 e0       	ldi	r24, 0x02	; 2
 cf6:	69 2f       	mov	r22, r25
 cf8:	a9 01       	movw	r20, r18
 cfa:	0e 94 a0 02 	call	0x540	; 0x540 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColsPin[Local_u8ColsCounter], &Local_u8PinValue);
					/* Check if the pin still low */
					while (Local_u8PinValue == DIO_u8_LOW)
 cfe:	8d 81       	ldd	r24, Y+5	; 0x05
 d00:	88 23       	and	r24, r24
 d02:	71 f3       	breq	.-36     	; 0xce0 <KPD_u8GetKeyState+0xa2>
					{
						DIO_u8GetPinValue(KPD_u8_PORT, KPD_Au8ColsPin[Local_u8ColsCounter], &Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
 d04:	8b 81       	ldd	r24, Y+3	; 0x03
 d06:	48 2f       	mov	r20, r24
 d08:	50 e0       	ldi	r21, 0x00	; 0
 d0a:	8a 81       	ldd	r24, Y+2	; 0x02
 d0c:	28 2f       	mov	r18, r24
 d0e:	30 e0       	ldi	r19, 0x00	; 0
 d10:	ca 01       	movw	r24, r20
 d12:	88 0f       	add	r24, r24
 d14:	99 1f       	adc	r25, r25
 d16:	88 0f       	add	r24, r24
 d18:	99 1f       	adc	r25, r25
 d1a:	82 0f       	add	r24, r18
 d1c:	93 1f       	adc	r25, r19
 d1e:	fc 01       	movw	r30, r24
 d20:	ea 55       	subi	r30, 0x5A	; 90
 d22:	ff 4f       	sbci	r31, 0xFF	; 255
 d24:	80 81       	ld	r24, Z
 d26:	ee 81       	ldd	r30, Y+6	; 0x06
 d28:	ff 81       	ldd	r31, Y+7	; 0x07
 d2a:	80 83       	st	Z, r24
					Local_u8Flag = 1;
 d2c:	81 e0       	ldi	r24, 0x01	; 1
 d2e:	89 83       	std	Y+1, r24	; 0x01
 d30:	07 c0       	rjmp	.+14     	; 0xd40 <KPD_u8GetKeyState+0x102>
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activation for row pins */
		for (Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_PORT, KPD_Au8RowsPin[Local_u8RowsCounter] ,DIO_u8_LOW);
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter < 4; Local_u8ColsCounter++)
 d32:	8a 81       	ldd	r24, Y+2	; 0x02
 d34:	8f 5f       	subi	r24, 0xFF	; 255
 d36:	8a 83       	std	Y+2, r24	; 0x02
 d38:	8a 81       	ldd	r24, Y+2	; 0x02
 d3a:	84 30       	cpi	r24, 0x04	; 4
 d3c:	08 f4       	brcc	.+2      	; 0xd40 <KPD_u8GetKeyState+0x102>
 d3e:	a7 cf       	rjmp	.-178    	; 0xc8e <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;

				}
			}
			DIO_u8SetPinValue(KPD_u8_PORT, KPD_Au8RowsPin[Local_u8RowsCounter] ,DIO_u8_HIGH);
 d40:	8b 81       	ldd	r24, Y+3	; 0x03
 d42:	88 2f       	mov	r24, r24
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	fc 01       	movw	r30, r24
 d48:	ea 54       	subi	r30, 0x4A	; 74
 d4a:	ff 4f       	sbci	r31, 0xFF	; 255
 d4c:	90 81       	ld	r25, Z
 d4e:	82 e0       	ldi	r24, 0x02	; 2
 d50:	69 2f       	mov	r22, r25
 d52:	41 e0       	ldi	r20, 0x01	; 1
 d54:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <DIO_u8SetPinValue>
			if (Local_u8Flag == 1) break;
 d58:	89 81       	ldd	r24, Y+1	; 0x01
 d5a:	81 30       	cpi	r24, 0x01	; 1
 d5c:	49 f0       	breq	.+18     	; 0xd70 <KPD_u8GetKeyState+0x132>
	u8 Local_u8Flag = 0;
	if (Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activation for row pins */
		for (Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++)
 d5e:	8b 81       	ldd	r24, Y+3	; 0x03
 d60:	8f 5f       	subi	r24, 0xFF	; 255
 d62:	8b 83       	std	Y+3, r24	; 0x03
 d64:	8b 81       	ldd	r24, Y+3	; 0x03
 d66:	84 30       	cpi	r24, 0x04	; 4
 d68:	08 f4       	brcc	.+2      	; 0xd6c <KPD_u8GetKeyState+0x12e>
 d6a:	83 cf       	rjmp	.-250    	; 0xc72 <KPD_u8GetKeyState+0x34>
 d6c:	01 c0       	rjmp	.+2      	; 0xd70 <KPD_u8GetKeyState+0x132>
			if (Local_u8Flag == 1) break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 d6e:	1c 82       	std	Y+4, r1	; 0x04
	}
	return Local_u8ErrorState;
 d70:	8c 81       	ldd	r24, Y+4	; 0x04
}
 d72:	27 96       	adiw	r28, 0x07	; 7
 d74:	0f b6       	in	r0, 0x3f	; 63
 d76:	f8 94       	cli
 d78:	de bf       	out	0x3e, r29	; 62
 d7a:	0f be       	out	0x3f, r0	; 63
 d7c:	cd bf       	out	0x3d, r28	; 61
 d7e:	cf 91       	pop	r28
 d80:	df 91       	pop	r29
 d82:	08 95       	ret

00000d84 <main>:
#include "HAL/LCD/LCD_interface.h"

#include "HAL/KEYPAD/KEYPAD_interface.h"

int main()
{
 d84:	df 93       	push	r29
 d86:	cf 93       	push	r28
 d88:	0f 92       	push	r0
 d8a:	cd b7       	in	r28, 0x3d	; 61
 d8c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
 d8e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidInit>
	LCD_voidInit();
 d92:	0e 94 46 05 	call	0xa8c	; 0xa8c <LCD_voidInit>
	KPD_voidInit();
 d96:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <KPD_voidInit>
	u8 Copy_pu8ReturnedKey;
	while (1)
	{
		KPD_u8GetKeyState(&Copy_pu8ReturnedKey);
 d9a:	ce 01       	movw	r24, r28
 d9c:	01 96       	adiw	r24, 0x01	; 1
 d9e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <KPD_u8GetKeyState>
		if (Copy_pu8ReturnedKey != KPD_u8_KEY_NOT_PRESSED)
 da2:	89 81       	ldd	r24, Y+1	; 0x01
 da4:	8f 3f       	cpi	r24, 0xFF	; 255
 da6:	c9 f3       	breq	.-14     	; 0xd9a <main+0x16>
		{
			LCD_voidSendInstruction(CLEAR_SCREAN);
 da8:	81 e0       	ldi	r24, 0x01	; 1
 daa:	0e 94 1e 05 	call	0xa3c	; 0xa3c <LCD_voidSendInstruction>
			LCD_voidWriteChar(Copy_pu8ReturnedKey);
 dae:	89 81       	ldd	r24, Y+1	; 0x01
 db0:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_voidWriteChar>
 db4:	f2 cf       	rjmp	.-28     	; 0xd9a <main+0x16>

00000db6 <_exit>:
 db6:	f8 94       	cli

00000db8 <__stop_program>:
 db8:	ff cf       	rjmp	.-2      	; 0xdb8 <__stop_program>
